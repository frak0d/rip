export module rip:lector;

import <vector>;
import <algorithm>;

export
namespace rip
{

template <typename T>
struct lector : std::vector<T>
{
	lector(const std::initializer_list<T>& lst) : std::vector<T>(lst) {}
	
	bool contains(const T& stuff) const
	{
		return std::find(this->begin(), this->end(), stuff) != this->end();
	}
	
	void sort(bool decending=false)
	{
		if (decending)
			std::sort(this->rbegin(), this->rend());
		else
			std::sort(this->begin(), this->end());
	}
	
	void append(const std::initializer_list<T>& lst)
	{
		this->insert(this->end(), lst.begin(), lst.end());
	}
	
	void reverse()
	{
		std::reverse(this->begin(), this->end());
	}
	
	auto length() const
	{
		return this->size();
	}
};

}

////////////

export module rip:lector:stream;

import <iostream>;

export template <class T>
std::ostream& operator << (std::ostream& out, const rip::lector<T>& lc)
{
	auto len = lc.size();
	out << "{";
	for (auto i=0 ; i < len ; ++i)
	{
		out << (*this)[i];
		if (i != len-1) out << ", ";
	}
	out << "}" << std::endl;
	return out;
}
